---
import { ViewTransitions } from 'astro:transitions';

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="pt-br" class="scroll-smooth">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Controle total dos seus investimentos em um só lugar." />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;900&display=swap" rel="stylesheet">
		<ViewTransitions />
		<title>{title}</title>
		<style is:global>
			/* Animações de fade para View Transitions */
			@keyframes fade-in {
				from {
					opacity: 0;
					transform: translateY(20px);
				}
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}

			@keyframes slide-from-right {
				from {
					opacity: 0;
					transform: translateX(30px);
				}
				to {
					opacity: 1;
					transform: translateX(0);
				}
			}

			@keyframes scale-in {
				from {
					opacity: 0;
					transform: scale(0.95);
				}
				to {
					opacity: 1;
					transform: scale(1);
				}
			}

			/* Classes de animação */
			.animate-fade-in {
				animation: fade-in 0.6s ease-out;
			}

			.animate-slide-right {
				animation: slide-from-right 0.6s ease-out;
			}

			.animate-scale {
				animation: scale-in 0.5s ease-out;
			}

			/* Transições suaves para elementos interativos */
			.transition-smooth {
				transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
			}
		</style>
	</head>
	<body class="bg-gray-100 dark:bg-gray-900">
		<slot />
	</body>
	
	<script is:inline>
		const theme = (() => {
			if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
				return localStorage.getItem('theme');
			}
			if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
				return 'dark';
			}
			return 'light';
		})();

		if (theme === 'light') {
			document.documentElement.classList.remove('dark');
		} else {
			document.documentElement.classList.add('dark');
		}
	</script>

	<script>
		import gsap from 'gsap';
		import { ScrollTrigger } from 'gsap/ScrollTrigger';

		gsap.registerPlugin(ScrollTrigger);
		
		// Torna GSAP disponível globalmente
		window.gsap = gsap;
		window.ScrollTrigger = ScrollTrigger;

		// Função para animar elementos na página
		function animatePageElements() {
			// Anima cards com stagger
			gsap.from('.card', {
				opacity: 0,
				y: 30,
				duration: 0.6,
				stagger: 0.1,
				ease: 'power2.out',
				clearProps: 'all'
			});

			// Anima botões com hover effect
			const buttons = document.querySelectorAll('button, .cta-button');
			buttons.forEach(button => {
				button.addEventListener('mouseenter', () => {
					gsap.to(button, {
						scale: 1.05,
						duration: 0.2,
						ease: 'power2.out'
					});
				});
				button.addEventListener('mouseleave', () => {
					gsap.to(button, {
						scale: 1,
						duration: 0.2,
						ease: 'power2.out'
					});
				});
			});
		}

		// Executa animações quando a página carrega
		document.addEventListener('astro:page-load', () => {
			animatePageElements();
			ScrollTrigger.refresh();
		});
	</script>
</html>